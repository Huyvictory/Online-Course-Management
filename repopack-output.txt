This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-26T08:29:29.030Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repopack, visit: https://github.com/yamadashy/repopack
</additional_info>

</file_summary>

<repository_structure>
.gitignore
.mvn/wrapper/maven-wrapper.properties
.repopackignore
pom.xml
repopack.config.json
src/main/java/com/online/course/management/project/aspect/LoggingAspect.java
src/main/java/com/online/course/management/project/aspect/RoleAuthorizationAspect.java
src/main/java/com/online/course/management/project/config/AdminInitializer.java
src/main/java/com/online/course/management/project/config/CacheConfig.java
src/main/java/com/online/course/management/project/config/DatabaseInitializer.java
src/main/java/com/online/course/management/project/config/JacksonConfig.java
src/main/java/com/online/course/management/project/config/SecurityConfig.java
src/main/java/com/online/course/management/project/constants/UserConstants.java
src/main/java/com/online/course/management/project/controller/UserController.java
src/main/java/com/online/course/management/project/dto/ErrorResponseDTO.java
src/main/java/com/online/course/management/project/dto/PaginationDto.java
src/main/java/com/online/course/management/project/dto/UserDTOs.java
src/main/java/com/online/course/management/project/entity/Category.java
src/main/java/com/online/course/management/project/entity/Course.java
src/main/java/com/online/course/management/project/entity/Role.java
src/main/java/com/online/course/management/project/entity/User.java
src/main/java/com/online/course/management/project/entity/UserRole.java
src/main/java/com/online/course/management/project/entity/UserRoleId.java
src/main/java/com/online/course/management/project/enums/CourseStatus.java
src/main/java/com/online/course/management/project/enums/RoleType.java
src/main/java/com/online/course/management/project/enums/UserStatus.java
src/main/java/com/online/course/management/project/exception/BaseException.java
src/main/java/com/online/course/management/project/exception/business/account/AccountException.java
src/main/java/com/online/course/management/project/exception/business/account/EmailAlreadyExistsException.java
src/main/java/com/online/course/management/project/exception/business/account/WrongEmailPasswordException.java
src/main/java/com/online/course/management/project/exception/business/BusinessException.java
src/main/java/com/online/course/management/project/exception/business/ForbiddenException.java
src/main/java/com/online/course/management/project/exception/business/InvalidRequestException.java
src/main/java/com/online/course/management/project/exception/business/InvalidRoleInfoException.java
src/main/java/com/online/course/management/project/exception/business/ResourceNotFoundException.java
src/main/java/com/online/course/management/project/exception/business/UnauthorizedException.java
src/main/java/com/online/course/management/project/exception/GlobalExceptionHandler.java
src/main/java/com/online/course/management/project/exception/technical/DatabaseException.java
src/main/java/com/online/course/management/project/exception/technical/ExternalServiceException.java
src/main/java/com/online/course/management/project/exception/technical/TechnicalException.java
src/main/java/com/online/course/management/project/filter/DebugFilter.java
src/main/java/com/online/course/management/project/filter/JwtAuthenticationFilter.java
src/main/java/com/online/course/management/project/mapper/UserMapper.java
src/main/java/com/online/course/management/project/ProjectApplication.java
src/main/java/com/online/course/management/project/repository/IRoleRepository.java
src/main/java/com/online/course/management/project/repository/IUserRepository.java
src/main/java/com/online/course/management/project/repository/IUserRoleRepository.java
src/main/java/com/online/course/management/project/security/CustomUserDetails.java
src/main/java/com/online/course/management/project/security/CustomUserDetailsService.java
src/main/java/com/online/course/management/project/security/JwtAuthenticationEntryPoint.java
src/main/java/com/online/course/management/project/security/JwtUtil.java
src/main/java/com/online/course/management/project/security/RequiredRole.java
src/main/java/com/online/course/management/project/security/UserSecurity.java
src/main/java/com/online/course/management/project/service/impl/UserServiceImpl.java
src/main/java/com/online/course/management/project/service/interfaces/IUserService.java
src/main/java/com/online/course/management/project/utils/generator/JwtSecretGenerator.java
src/main/java/com/online/course/management/project/utils/user/UserControllerUtils.java
src/main/java/com/online/course/management/project/utils/user/UserServiceUtils.java
src/main/resources/application.properties
src/main/resources/db/migration/V2__Update_User_table.sql
src/main/resources/db/migration/V3__Add_status_to_users.sql
src/main/resources/db/migration/V4__Add_course_and_category_tables.sql
src/main/resources/db/migration/V5__Add_indexes_to_course_and_category.sql
src/test/java/com/online/course/management/project/config/SecurityTestConfig.java
src/test/java/com/online/course/management/project/controller/UserControllerTest.java
src/test/java/com/online/course/management/project/dto/UserDTOsValidationTest.java
src/test/java/com/online/course/management/project/ProjectApplicationTests.java
src/test/java/com/online/course/management/project/service/impl/UserServiceImplTest.java
src/test/resources/application.properties
</repository_structure>

<repository_files>
This section contains the contents of the repository's files.

<file path=".gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path=".mvn/wrapper/maven-wrapper.properties">
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
</file>

<file path=".repopackignore">
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/

target
mvnw
mvnw.cmd
</file>

<file path="pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.online.course.management</groupId>
    <artifactId>project</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Project</name>
    <description>Project</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>17</java.version>
        <mysql.version>8.0.33</mysql.version>
        <junit-jupiter.version>5.9.3</junit-jupiter.version>
        <mockito.version>5.3.1</mockito.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-mysql</artifactId>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.11.5</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.11.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>1.5.5.Final</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>1.5.5.Final</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!-- Test dependencies -->
        <!-- Spring Boot Starter Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>9.22.3</version>
                <configuration>
                    <url>jdbc:mysql://localhost:3306/onlinecoursemanagement</url>
                    <user>Huyvictory</user>
                    <password>12345</password>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.1.2</version>
                <configuration>
                    <argLine>
                        -XX:+EnableDynamicAgentLoading
                        --add-opens java.base/java.lang=ALL-UNNAMED
                        --add-opens java.base/java.util=ALL-UNNAMED
                        --add-opens java.base/java.time=ALL-UNNAMED
                        -Xshare:off
                    </argLine>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
</file>

<file path="repopack.config.json">
{
  "output": {
    "filePath": "repopack-output.txt",
    "style": "xml",
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  }
}
</file>

<file path="src/main/java/com/online/course/management/project/aspect/LoggingAspect.java">
package com.online.course.management.project.aspect;

import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

@Aspect
@Component
public class LoggingAspect {
    private static final Logger logger = LoggerFactory.getLogger(LoggingAspect.class);

    @Pointcut("execution(* com.online.course.management.project.controller.*.*(..))")
    public void controllerMethods() {
    }

    @Pointcut("execution(* com.online.course.management.project.service.*.*(..))")
    public void serviceMethods() {
    }

    @Around("controllerMethods() || serviceMethods()")
    public Object logMethodExecution(ProceedingJoinPoint joinPoint) throws Throwable {
        String className = joinPoint.getSignature().getDeclaringTypeName();
        String methodName = joinPoint.getSignature().getName();

        MDC.put("class", className);
        MDC.put("method", methodName);

        logger.info("Entering: classname={}, method={}", className, methodName);

        long startTime = System.currentTimeMillis();
        Object result = null;
        try {
            result = joinPoint.proceed();
            return result;
        } catch (Exception e) {
            logger.error("Exception in {}.{}: {}", className, methodName, e.getMessage());
            throw e;
        } finally {
            long endTime = System.currentTimeMillis();
            logger.info("Exiting: {}.{}. Execution time: {} ms", className, methodName, (endTime - startTime));
            MDC.clear();
        }
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/aspect/RoleAuthorizationAspect.java">
package com.online.course.management.project.aspect;

import com.online.course.management.project.exception.business.ForbiddenException;
import com.online.course.management.project.exception.business.UnauthorizedException;
import com.online.course.management.project.security.CustomUserDetails;
import com.online.course.management.project.security.RequiredRole;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.Set;
import java.util.stream.Collectors;

@Aspect
@Component
public class RoleAuthorizationAspect {

    private static final Logger logger = LoggerFactory.getLogger(RoleAuthorizationAspect.class);

    @Around("@annotation(requiredRole)")
    public Object authorizeRole(ProceedingJoinPoint joinPoint, RequiredRole requiredRole) throws Throwable {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (authentication == null || !authentication.isAuthenticated()) {
            logger.warn("Unauthorized access attempt: User is not authenticated");
            throw new UnauthorizedException("User is not authenticated");
        }

        CustomUserDetails userDetails = (CustomUserDetails) authentication.getPrincipal();
        Set<String> userRoles = userDetails.getAuthorities().stream()
                .map(a -> a.getAuthority().replace("ROLE_", ""))
                .collect(Collectors.toSet());

        logger.debug("User roles: {}", userRoles);
        logger.debug("Required roles: {}", Arrays.toString(requiredRole.value()));

        boolean hasRequiredRole = Arrays.stream(requiredRole.value())
                .anyMatch(userRoles::contains);

        if (!hasRequiredRole) {
            logger.warn("Forbidden access attempt: User {} does not have the required role", userDetails.getUsername());
            throw new ForbiddenException("User does not have the required role");
        }

        logger.info("Access granted to user {} for method {}", userDetails.getUsername(), joinPoint.getSignature().getName());
        return joinPoint.proceed();
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/config/AdminInitializer.java">
package com.online.course.management.project.config;

import com.online.course.management.project.entity.Role;
import com.online.course.management.project.entity.User;
import com.online.course.management.project.enums.RoleType;
import com.online.course.management.project.repository.IRoleRepository;
import com.online.course.management.project.repository.IUserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

@Component
@Order(2)
@Slf4j
public class AdminInitializer implements CommandLineRunner {
    private final IUserRepository userRepository;
    private final IRoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public AdminInitializer(IUserRepository userRepository, IRoleRepository roleRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    @Transactional
    public void run(String... args) throws Exception {
        if (!userRepository.existsByEmail("admin@gmail.com")) {
            User adminUser = new User();
            adminUser.setUsername("admin");
            adminUser.setEmail("admin@gmail.com");
            adminUser.setPasswordHash(passwordEncoder.encode("admin"));
            adminUser.setRealName("Admin User");

            Role adminRole = roleRepository.findByName(RoleType.ADMIN)
                    .orElseThrow(() -> new RuntimeException("Admin role not found"));
            adminUser.addRole(adminRole);

            userRepository.save(adminUser);

            log.info("Admin user created successfully.");
        } else {
            log.info("Admin user already exists.");
        }
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/config/CacheConfig.java">
package com.online.course.management.project.config;

import com.github.benmanes.caffeine.cache.Caffeine;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.concurrent.TimeUnit;

@Configuration
@EnableCaching
public class CacheConfig {

    @Bean
    public Caffeine caffeineConfig() {
        return Caffeine.newBuilder()
                .expireAfterWrite(60, TimeUnit.MINUTES)
                .initialCapacity(100)
                .maximumSize(500);
    }

    @Bean
    public CacheManager cacheManager(Caffeine caffeine) {
        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();
        caffeineCacheManager.setCaffeine(caffeine);
        return caffeineCacheManager;
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/config/DatabaseInitializer.java">
package com.online.course.management.project.config;

import com.online.course.management.project.entity.Role;
import com.online.course.management.project.enums.RoleType;
import com.online.course.management.project.repository.IRoleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

@Component
@Order(1)
public class DatabaseInitializer implements CommandLineRunner {
    private final IRoleRepository roleRepository;

    @Autowired
    public DatabaseInitializer(IRoleRepository roleRepository) {
        this.roleRepository = roleRepository;
    }

    @Override
    public void run(String... args) {
        initializeRoles();
    }

    private void initializeRoles() {
        for (RoleType roleType : RoleType.values()) {
            if (!roleRepository.existsByName(roleType)) {
                Role role = new Role();
                role.setName(roleType);
                roleRepository.save(role);
            }
        }
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/config/JacksonConfig.java">
package com.online.course.management.project.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

@Configuration
public class JacksonConfig {

    @Bean
    @Primary
    public ObjectMapper objectMapper() {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule());

        return objectMapper;
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/config/SecurityConfig.java">
package com.online.course.management.project.config;

import com.online.course.management.project.filter.JwtAuthenticationFilter;
import com.online.course.management.project.security.CustomUserDetailsService;
import com.online.course.management.project.security.JwtAuthenticationEntryPoint;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    private static final Logger logger = LoggerFactory.getLogger(SecurityConfig.class);

    private final CustomUserDetailsService userDetailsService;
    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    private final JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;

    @Autowired
    public SecurityConfig(CustomUserDetailsService userDetailsService, JwtAuthenticationFilter jwtAuthenticationFilter, JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint) {
        this.userDetailsService = userDetailsService;
        this.jwtAuthenticationFilter = jwtAuthenticationFilter;
        this.jwtAuthenticationEntryPoint = jwtAuthenticationEntryPoint;
    }

    @Bean
    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return new ProviderManager(authProvider);
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        logger.info("Configuring security filter chain");
        http
                .csrf(csrf -> {
                    csrf.disable();
                    logger.info("CSRF is disabled");
                })
                .sessionManagement(session -> {
                    session.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
                    logger.info("Session management set to STATELESS");
                })
                .authorizeHttpRequests(authz -> authz
                        .requestMatchers("/api/v1/users/register", "/api/v1/users/login").permitAll()
                        .anyRequest().authenticated()
                )
                .anonymous(anonymous -> anonymous.disable()) // Disable anonymous access
                .userDetailsService(userDetailsService)
                .exceptionHandling(ex -> ex
                        .authenticationEntryPoint(jwtAuthenticationEntryPoint)
                )
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        logger.info("Security configuration completed");
        return http.build();
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/constants/UserConstants.java">
package com.online.course.management.project.constants;

public class UserConstants {
    public static final String BASE_PATH = "/api/v1/users";
    public static final String REGISTER_PATH = "/register";
    public static final String LOGIN_PATH = "/login";
    public static final String PROFILE_PATH = "/profile";
    public static final String UPDATE_ROLES_PATH = "/{id}/roles";
    public static final String SEARCH_PATH = "/search";
    public static final String ALL_PATH = "/all";
    public static final String PATH_VARIABLE_PATH = "/{id}";

}
</file>

<file path="src/main/java/com/online/course/management/project/controller/UserController.java">
package com.online.course.management.project.controller;

import com.online.course.management.project.constants.UserConstants;
import com.online.course.management.project.dto.PaginationDto;
import com.online.course.management.project.dto.UserDTOs;
import com.online.course.management.project.enums.RoleType;
import com.online.course.management.project.mapper.UserMapper;
import com.online.course.management.project.security.CustomUserDetails;
import com.online.course.management.project.security.JwtUtil;
import com.online.course.management.project.security.RequiredRole;
import com.online.course.management.project.service.interfaces.IUserService;
import com.online.course.management.project.utils.user.UserControllerUtils;
import com.online.course.management.project.utils.user.UserServiceUtils;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
import java.util.Set;

@RestController
@RequestMapping(UserConstants.BASE_PATH)
@Slf4j
public class UserController {

    private final IUserService userService;
    private final UserMapper userMapper;
    private final JwtUtil jwtUtil;
    private final UserControllerUtils userControllerUtils;

    @Autowired
    public UserController(IUserService userService, UserMapper userMapper, JwtUtil jwtUtil, UserControllerUtils userControllerUtils) {
        this.userService = userService;
        this.userMapper = userMapper;
        this.jwtUtil = jwtUtil;
        this.userControllerUtils = userControllerUtils;
    }

    @PostMapping(UserConstants.REGISTER_PATH)
    public ResponseEntity<UserDTOs.UserResponseDto> registerUser(@Valid @RequestBody UserDTOs.UserRegistrationDto registrationDto) {
        log.info("Received registration request for email: {}", registrationDto.getEmail());
        UserDTOs.UserResponseDto responseDto = userService.registerUser(registrationDto);
        return ResponseEntity.status(HttpStatus.CREATED).body(responseDto);
    }

    @PostMapping(UserConstants.LOGIN_PATH)
    public ResponseEntity<UserDTOs.JwtResponseDto> loginUser(@Valid @RequestBody UserDTOs.UserLoginDto loginDto) {
        log.info("Received login request for username/email: {}", loginDto.getUsernameOrEmail());
        Authentication authentication = userControllerUtils.authenticate(loginDto.getUsernameOrEmail(), loginDto.getPassword());
        String jwt = jwtUtil.generateToken((CustomUserDetails) authentication.getPrincipal());
        return ResponseEntity.ok(new UserDTOs.JwtResponseDto(jwt));
    }

    @GetMapping(UserConstants.PATH_VARIABLE_PATH)
    @RequiredRole({"USER", "ADMIN"})
    public ResponseEntity<UserDTOs.UserResponseDto> getUserById(@PathVariable Long id) {
        log.info("Fetching user with id: {}", id);
        return userService.getUserById(id)
                .map(user -> ResponseEntity.ok(userMapper.toDto(user)))
                .orElse(ResponseEntity.notFound().build());
    }

    @PutMapping(UserConstants.PROFILE_PATH)
    public ResponseEntity<UserDTOs.UserResponseDto> updateUserProfile(@Valid @RequestBody UserDTOs.UpdateProfileDto updateProfileDto) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        CustomUserDetails userDetails = (CustomUserDetails) authentication.getPrincipal();
        Long userId = userDetails.getId();

        log.info("Updating profile for user id: {}", userId);
        UserDTOs.UserResponseDto updatedUser = userService.updateUserProfile(userId, updateProfileDto);
        return ResponseEntity.ok(updatedUser);
    }

    @PutMapping(UserConstants.UPDATE_ROLES_PATH)
    @RequiredRole({"ADMIN"})
    public ResponseEntity<UserDTOs.RoleUpdateResponseDto> updateUserRoles(@PathVariable Long id, @Valid @RequestBody UserDTOs.UpdateUserRolesDto updateUserRolesDto) {
        log.info("Updating roles for user id: {}", id);

        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        CustomUserDetails currentUser = (CustomUserDetails) authentication.getPrincipal();

        Set<RoleType> validRoles = userControllerUtils.validateRoles(updateUserRolesDto.getRoles());

        var updatedRoles = userService.updateUserRoles(id, validRoles, currentUser.getId());

        UserDTOs.RoleUpdateResponseDto responseDto = new UserDTOs.RoleUpdateResponseDto(
                "Roles updated successfully",
                updatedRoles
        );
        return ResponseEntity.ok().body(responseDto);
    }

    @GetMapping(UserConstants.ALL_PATH)
    @RequiredRole({"ADMIN"})
    public ResponseEntity<PaginationDto.PaginationResponseDto> getAllUsers(@Valid PaginationDto.PaginationRequestDto paginationRequestDto) {
        int page = paginationRequestDto.getPage();
        int limit = paginationRequestDto.getLimit();

        log.info("Fetching all users with roles, page: {}, limit: {}", page, limit);


        Pageable pageable = PageRequest.of(page - 1, limit);
        Page<UserDTOs.UserWithRolesResponseDto> users = userService.getAllUsers(paginationRequestDto.toPageable());
        long totalUsers = userService.countUsers(Optional.empty());

        PaginationDto.PaginationResponseDto<UserDTOs.UserWithRolesResponseDto> response = new PaginationDto.PaginationResponseDto<>(
                users.getContent(),
                users.getNumber() + 1,
                users.getSize(),
                totalUsers
        );

        return ResponseEntity.ok().body(response);
    }

    @GetMapping(UserConstants.SEARCH_PATH)
    @RequiredRole({"ADMIN"})
    public ResponseEntity<PaginationDto.PaginationResponseDto<UserDTOs.UserWithRolesResponseDto>> searchUsers(
            @Valid UserDTOs.UserSearchRequestDto searchRequest,
            @Valid PaginationDto.PaginationRequestDto paginationRequest) {

        log.info("Searching users with criteria: {}, page: {}, size: {}",
                searchRequest, paginationRequest.getPage(), paginationRequest.getLimit());

        Page<UserDTOs.UserWithRolesResponseDto> usersPage = userService.searchUsers(
                searchRequest, paginationRequest.toPageable());
        long totalSearchedUsers = userService.countUsers(Optional.of(searchRequest));

        PaginationDto.PaginationResponseDto<UserDTOs.UserWithRolesResponseDto> response = new PaginationDto.PaginationResponseDto<>(
                usersPage.getContent(),
                usersPage.getNumber() + 1,
                usersPage.getSize(),
                totalSearchedUsers
        );

        return ResponseEntity.ok(response);
    }

    @DeleteMapping(UserConstants.PATH_VARIABLE_PATH)
    @RequiredRole({"ADMIN"})
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        log.info("Deleting user with id: {}", id);
        userService.softDeleteUser(id);
        return ResponseEntity.noContent().build();
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/dto/ErrorResponseDTO.java">
package com.online.course.management.project.dto;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDateTime;
import java.util.List;

@Getter
@Setter
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ErrorResponseDTO {
    private LocalDateTime timestamp;
    private int status;
    private String message;
    private List<String> errors;

    public ErrorResponseDTO(String message, int status) {
        this(message, status, null);
    }

    public ErrorResponseDTO(String message, int status, List<String> errors) {
        this.timestamp = LocalDateTime.now();
        this.status = status;
        this.message = message;
        this.errors = errors;
    }

}
</file>

<file path="src/main/java/com/online/course/management/project/dto/PaginationDto.java">
package com.online.course.management.project.dto;

import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.List;


public class PaginationDto {

    @Data
    public static class PaginationRequestDto {

        @Min(value = 1, message = "Page index must not be less than one")
        private int page = 1;

        @Min(value = 1, message = "Limit must be greater than or equal to 1")
        @Max(value = 50, message = "Limit must be less than or equal to 50")
        private int limit = 10;

        public Pageable toPageable() {
            return PageRequest.of(page - 1, limit);
        }
    }


    @Data
    @AllArgsConstructor
    public static class PaginationResponseDto<T> {
        private List<T> data;
        private int currentPage;
        private int limit;
        private long total;

    }
}
</file>

<file path="src/main/java/com/online/course/management/project/dto/UserDTOs.java">
package com.online.course.management.project.dto;

import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import org.springframework.format.annotation.DateTimeFormat;

import java.time.LocalDateTime;
import java.util.Set;

public class UserDTOs {
    @Data
    public static class UserRegistrationDto {
        @NotBlank
        @Size(max = 50)
        @Email
        private String email;

        @NotBlank
        @Size(min = 6, max = 40, message = "Password must be between 6 and 40 characters")
        private String password;


    }

    @Data
    public static class UserLoginDto {
        @NotBlank
        @Size(max = 50)
        private String usernameOrEmail;

        @NotBlank
        @Size(min = 6, max = 40)
        private String password;
    }

    @Data
    public static class UserResponseDto {
        private Long id;
        private String username;
        private String email;
        private String realName;
        private String status;
    }

    @Data
    public static class UpdateProfileDto {
        @Size(max = 50)
        private String username;

        @Size(max = 50)
        @Email
        private String email;

        @Size(max = 100)
        private String realName;

        @Size(min = 6, max = 40)
        private String password;

        private String status;
    }

    @Data
    public static class UpdateUserRolesDto {
        @NotEmpty
        private Set<String> roles;
    }

    @Data
    @AllArgsConstructor
    public static class JwtResponseDto {
        @NotNull
        private String token;
    }

    @Data
    @AllArgsConstructor
    public static class RoleUpdateResponseDto {
        private String message;
        private Set<String> updatedRoles;
    }

    @Data
    public static class UserWithRolesResponseDto {
        private Long id;
        private String username;
        private String email;
        private String realName;
        private String status;
        private Set<String> roles;
    }

    @Data
    public static class UserSearchRequestDto {
        @Size(max = 50)
        private String username;

        @Size(max = 50)
        @Email
        private String email;

        @Size(max = 100)
        private String realName;

        private String status;

        @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
        private LocalDateTime fromDate;

        @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
        private LocalDateTime toDate;
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/entity/Category.java">
package com.online.course.management.project.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

@Entity
@Table(name = "categories")
@Getter
@Setter
public class Category {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Size(max = 100)
    @Column(nullable = false, unique = true)
    private String name;

    @ManyToMany(mappedBy = "categories")
    private Set<Course> courses = new HashSet<>();

    @CreationTimestamp
    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(nullable = false)
    private LocalDateTime updatedAt;

    @Column
    private LocalDateTime deletedAt;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Category)) return false;
        Category category = (Category) o;
        return id != null && Objects.equals(id, category.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/entity/Course.java">
package com.online.course.management.project.entity;

import com.online.course.management.project.enums.CourseStatus;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

@Entity
@Table(name = "courses")
@Getter
@Setter
public class Course {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Size(max = 255)
    @Column(nullable = false)
    private String title;

    @Size(max = 1000)
    @Column(columnDefinition = "TEXT")
    private String description;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "instructor_id", nullable = false)
    private User instructor;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private CourseStatus status = CourseStatus.DRAFT;

    @CreationTimestamp
    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(nullable = false)
    private LocalDateTime updatedAt;

    @Column
    private LocalDateTime deletedAt;

    @ManyToMany
    @JoinTable(
            name = "course_categories",
            joinColumns = @JoinColumn(name = "course_id"),
            inverseJoinColumns = @JoinColumn(name = "category_id")
    )
    private Set<Category> categories = new HashSet<>();

    public void addCategory(Category category) {
        categories.add(category);
        category.getCourses().add(this);
    }

    public void removeCategory(Category category) {
        categories.remove(category);
        category.getCourses().remove(this);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Course)) return false;
        Course course = (Course) o;
        return id != null && Objects.equals(id, course.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/entity/Role.java">
package com.online.course.management.project.entity;

import com.online.course.management.project.enums.RoleType;
import jakarta.persistence.*;
import lombok.Data;

import java.util.HashSet;
import java.util.Set;

@Entity
@Table(name = "roles")
@Data
public class Role {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Enumerated(EnumType.STRING)
    @Column(length = 20, unique = true, nullable = false)
    private RoleType name;

    @OneToMany(mappedBy = "role", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<UserRole> userRoles = new HashSet<>();
}
</file>

<file path="src/main/java/com/online/course/management/project/entity/User.java">
package com.online.course.management.project.entity;

import com.online.course.management.project.enums.UserStatus;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

@Entity
@Table(name = "users")
@Getter
@Setter
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Size(min = 3, max = 50)
    @Column(unique = true, nullable = false)
    private String username;

    @NotBlank
    @Size(max = 50)
    @Email
    @Column(unique = true, nullable = false, length = 320)
    private String email;

    @Size(max = 100)
    @Column(name = "real_name", nullable = true)
    private String realName;

    @NotBlank
    @Size(min = 60, max = 60)
    @Column(nullable = false)
    private String passwordHash;

    @CreationTimestamp
    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(nullable = false)
    private LocalDateTime updatedAt;

    @Column
    private LocalDateTime deletedAt;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private UserStatus status = UserStatus.ACTIVE;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<UserRole> userRoles = new HashSet<>();

    // Helper methods
    public void addRole(Role role) {
        UserRole userRole = new UserRole(this, role);
        userRoles.add(userRole);
    }

    public void removeRole(Role role) {
        userRoles.removeIf(userRole -> userRole.getRole().equals(role));
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof User)) return false;
        User user = (User) o;
        return id != null && Objects.equals(id, user.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/entity/UserRole.java">
package com.online.course.management.project.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDateTime;
import java.util.Objects;

@Entity
@Table(name = "user_roles")
@Getter
@Setter
@NoArgsConstructor
public class UserRole {

    @EmbeddedId
    private UserRoleId id;

    @ManyToOne(fetch = FetchType.EAGER)
    @MapsId("userId")
    private User user;

    @ManyToOne(fetch = FetchType.EAGER)
    @MapsId("roleId")
    private Role role;

    @Column(nullable = false)
    private LocalDateTime assignedAt;

    public UserRole(User user, Role role) {
        this.user = user;
        this.role = role;
        this.id = new UserRoleId(user.getId(), role.getId());
        this.assignedAt = LocalDateTime.now();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof UserRole userRole)) return false;
        return Objects.equals(user.getId(), userRole.user.getId()) &&
                Objects.equals(role.getId(), userRole.role.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(user.getId(), role.getId());
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/entity/UserRoleId.java">
package com.online.course.management.project.entity;

import jakarta.persistence.Embeddable;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.io.Serializable;

@Embeddable
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserRoleId implements Serializable {

    private Long userId;
    private Long roleId;
}
</file>

<file path="src/main/java/com/online/course/management/project/enums/CourseStatus.java">
package com.online.course.management.project.enums;

public enum CourseStatus {
    DRAFT,
    PUBLISHED,
    ARCHIVED
}
</file>

<file path="src/main/java/com/online/course/management/project/enums/RoleType.java">
package com.online.course.management.project.enums;

public enum RoleType {
    USER,
    ADMIN,
    INSTRUCTOR
}
</file>

<file path="src/main/java/com/online/course/management/project/enums/UserStatus.java">
package com.online.course.management.project.enums;

public enum UserStatus {
    ACTIVE, INACTIVE, SUSPENDED
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/BaseException.java">
package com.online.course.management.project.exception;

public class BaseException extends RuntimeException {
    public BaseException(String message) {
        super(message);
    }

    public BaseException(String message, Throwable cause) {
        super(message, cause);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/business/account/AccountException.java">
package com.online.course.management.project.exception.business.account;

import com.online.course.management.project.exception.business.BusinessException;

public class AccountException extends BusinessException {
    public AccountException(String message) {
        super(message);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/business/account/EmailAlreadyExistsException.java">
package com.online.course.management.project.exception.business.account;

public class EmailAlreadyExistsException extends AccountException {
    public EmailAlreadyExistsException(String message) {
        super(message);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/business/account/WrongEmailPasswordException.java">
package com.online.course.management.project.exception.business.account;

public class WrongEmailPasswordException extends AccountException {
    public WrongEmailPasswordException(String message) {
        super(message);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/business/BusinessException.java">
package com.online.course.management.project.exception.business;

import com.online.course.management.project.exception.BaseException;

public class BusinessException extends BaseException {
    public BusinessException(String message) {
        super(message);
    }

    public BusinessException(String message, Throwable cause) {
        super(message, cause);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/business/ForbiddenException.java">
package com.online.course.management.project.exception.business;

public class ForbiddenException extends BusinessException {
    public ForbiddenException(String message) {
        super(message);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/business/InvalidRequestException.java">
package com.online.course.management.project.exception.business;

public class InvalidRequestException extends BusinessException {
    public InvalidRequestException(String message) {
        super(message);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/business/InvalidRoleInfoException.java">
package com.online.course.management.project.exception.business;

public class InvalidRoleInfoException extends BusinessException {
    public InvalidRoleInfoException(String message) {
        super(message);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/business/ResourceNotFoundException.java">
package com.online.course.management.project.exception.business;

public class ResourceNotFoundException extends BusinessException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/business/UnauthorizedException.java">
package com.online.course.management.project.exception.business;

public class UnauthorizedException extends BusinessException {
    public UnauthorizedException(String message) {
        super(message);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/GlobalExceptionHandler.java">
package com.online.course.management.project.exception;

import com.online.course.management.project.dto.ErrorResponseDTO;
import com.online.course.management.project.exception.business.*;
import com.online.course.management.project.exception.business.account.AccountException;
import com.online.course.management.project.exception.business.account.EmailAlreadyExistsException;
import com.online.course.management.project.exception.business.account.WrongEmailPasswordException;
import com.online.course.management.project.exception.technical.DatabaseException;
import com.online.course.management.project.exception.technical.ExternalServiceException;
import com.online.course.management.project.exception.technical.TechnicalException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.AuthenticationException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.util.List;
import java.util.stream.Collectors;

@ControllerAdvice
@Slf4j
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {
    @ExceptionHandler(BusinessException.class)
    public ResponseEntity<ErrorResponseDTO> handleBusinessException(BusinessException ex) {
        log.warn("Business exception occurred: {}", ex.getMessage());
        HttpStatus status = HttpStatus.BAD_REQUEST;
        if (ex instanceof ResourceNotFoundException) {
            status = HttpStatus.NOT_FOUND;
        } else if (ex instanceof UnauthorizedException) {
            status = HttpStatus.UNAUTHORIZED;
        } else if (ex instanceof ForbiddenException) {
            status = HttpStatus.FORBIDDEN;
        } else if (ex instanceof AccountException) {
            if (ex instanceof EmailAlreadyExistsException) {
                status = HttpStatus.CONFLICT;
            } else if (ex instanceof WrongEmailPasswordException) {
                status = HttpStatus.UNAUTHORIZED;
            }

        }
        ErrorResponseDTO errorResponse = new ErrorResponseDTO(ex.getMessage(), status.value());
        return new ResponseEntity<>(errorResponse, status);
    }

    @ExceptionHandler(TechnicalException.class)
    public ResponseEntity<ErrorResponseDTO> handleTechnicalException(TechnicalException ex) {
        log.error("Technical exception occurred: {}", ex.getMessage(), ex);
        HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;
        String message = "An internal error occurred";

        if (ex instanceof DatabaseException) {
            message = "A database error occurred";
        } else if (ex instanceof ExternalServiceException) {
            message = "An error occurred with an external service";
            status = HttpStatus.BAD_GATEWAY;
        }

        ErrorResponseDTO errorResponse = new ErrorResponseDTO(message, status.value());
        return new ResponseEntity<>(errorResponse, status);
    }

    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
            MethodArgumentNotValidException ex,
            HttpHeaders headers,
            HttpStatusCode status,
            WebRequest request) {
        log.warn("Validation failed: {}", ex.getMessage());
        List<String> errors = ex.getBindingResult()
                .getFieldErrors()
                .stream()
                .map(error -> error.getField() + ": " + error.getDefaultMessage())
                .collect(Collectors.toList());

        ErrorResponseDTO errorResponse = new ErrorResponseDTO("Validation failed", HttpStatus.BAD_REQUEST.value(), errors);
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(AuthenticationException.class)
    public ResponseEntity<ErrorResponseDTO> handleAuthenticationException(AuthenticationException ex) {
        log.warn("Authentication failed: {}", ex.getMessage());
        ErrorResponseDTO errorResponse = new ErrorResponseDTO("Authentication failed", HttpStatus.UNAUTHORIZED.value());
        return new ResponseEntity<>(errorResponse, HttpStatus.UNAUTHORIZED);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponseDTO> handleGenericException(Exception ex) {
        log.error("Unexpected error occurred: {}", ex.getMessage(), ex);
        ErrorResponseDTO errorResponse = new ErrorResponseDTO("An unexpected error occurred", HttpStatus.INTERNAL_SERVER_ERROR.value());
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/technical/DatabaseException.java">
package com.online.course.management.project.exception.technical;

public class DatabaseException extends TechnicalException {
    public DatabaseException(String message) {
        super(message);
    }

    public DatabaseException(String message, Throwable cause) {
        super(message, cause);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/technical/ExternalServiceException.java">
package com.online.course.management.project.exception.technical;

public class ExternalServiceException extends TechnicalException {
    public ExternalServiceException(String message) {
        super(message);
    }

    public ExternalServiceException(String message, Throwable cause) {
        super(message, cause);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/exception/technical/TechnicalException.java">
package com.online.course.management.project.exception.technical;

import com.online.course.management.project.exception.BaseException;

public class TechnicalException extends BaseException {
    public TechnicalException(String message) {
        super(message);
    }

    public TechnicalException(String message, Throwable cause) {
        super(message, cause);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/filter/DebugFilter.java">
package com.online.course.management.project.filter;

import jakarta.servlet.*;
import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class DebugFilter implements Filter {

    private static final Logger logger = LoggerFactory.getLogger(DebugFilter.class);

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;
        logger.info("Incoming request: {} {}", httpRequest.getMethod(), httpRequest.getRequestURI());
        filterChain.doFilter(servletRequest, servletResponse);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/filter/JwtAuthenticationFilter.java">
package com.online.course.management.project.filter;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.online.course.management.project.dto.ErrorResponseDTO;
import com.online.course.management.project.security.CustomUserDetailsService;
import com.online.course.management.project.security.JwtUtil;
import io.jsonwebtoken.ExpiredJwtException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    private final JwtUtil jwtUtil;
    private final CustomUserDetailsService userDetailsService;
    private final ObjectMapper objectMapper;

    private static final Logger logger = LoggerFactory.getLogger(JwtAuthenticationFilter.class);

    @Autowired
    public JwtAuthenticationFilter(JwtUtil jwtUtil, CustomUserDetailsService userDetailsService, ObjectMapper objectMapper) {
        this.jwtUtil = jwtUtil;
        this.userDetailsService = userDetailsService;
        this.objectMapper = objectMapper;
    }

    private String getJwtFromRequest(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }
        return null;
    }

    private void handleExpiredJwtException(HttpServletResponse response, ExpiredJwtException e) throws IOException {
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
        ErrorResponseDTO errorResponse = new ErrorResponseDTO("JWT token has expired", HttpServletResponse.SC_UNAUTHORIZED);
        objectMapper.writeValue(response.getOutputStream(), errorResponse);
    }

    private void handleInvalidJwtException(HttpServletResponse response, Exception e) throws IOException {
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
        ErrorResponseDTO errorResponse = new ErrorResponseDTO("Invalid JWT token", HttpServletResponse.SC_UNAUTHORIZED);
        objectMapper.writeValue(response.getOutputStream(), errorResponse);
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        try {
            String jwt = getJwtFromRequest(request);
            if (jwt != null && jwtUtil.validateToken(jwt)) {
                String username = jwtUtil.extractUsername(jwt);
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);
                UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authentication);
                logger.info("Authenticated user {}, setting security context", username);
            }
        } catch (ExpiredJwtException e) {
            logger.error("Expired JWT token", e);
            SecurityContextHolder.clearContext();
            this.handleExpiredJwtException(response, e);
            return;
        } catch (Exception e) {
            logger.error("Cannot set user authentication: {}", e.getMessage());
            this.handleInvalidJwtException(response, e);
            return;
        }

        filterChain.doFilter(request, response);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/mapper/UserMapper.java">
package com.online.course.management.project.mapper;

import com.online.course.management.project.dto.UserDTOs;
import com.online.course.management.project.entity.User;
import com.online.course.management.project.entity.UserRole;
import com.online.course.management.project.enums.UserStatus;
import org.mapstruct.*;
import org.springframework.stereotype.Component;

import java.util.Set;
import java.util.stream.Collectors;

@Mapper(componentModel = "spring", unmappedSourcePolicy = ReportingPolicy.IGNORE)
public interface UserMapper {

    @Mapping(target = "passwordHash", ignore = true)
    @Mapping(target = "userRoles", ignore = true)
    User toEntity(UserDTOs.UserRegistrationDto dto);


    UserDTOs.UserResponseDto toDto(User user);

    @Mapping(target = "roles", expression = "java(mapRoles(user.getUserRoles()))")
    UserDTOs.UserWithRolesResponseDto toUserWithRolesDto(User user);

    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
    void updateUserFromDto(UserDTOs.UpdateProfileDto dto, @MappingTarget User user);

    default Set<String> mapRoles(Set<UserRole> userRoles) {
        return userRoles.stream()
                .map(userRole -> userRole.getRole().getName().name())
                .collect(Collectors.toSet());
    }


}
</file>

<file path="src/main/java/com/online/course/management/project/ProjectApplication.java">
package com.online.course.management.project;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.EnableAspectJAutoProxy;

@SpringBootApplication
@EnableCaching
@EnableAspectJAutoProxy
public class ProjectApplication {

    public static void main(String[] args) {
        SpringApplication.run(ProjectApplication.class, args);
    }

}
</file>

<file path="src/main/java/com/online/course/management/project/repository/IRoleRepository.java">
package com.online.course.management.project.repository;

import com.online.course.management.project.entity.Role;
import com.online.course.management.project.enums.RoleType;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface IRoleRepository extends JpaRepository<Role, Long> {
    Optional<Role> findByName(RoleType name);
    boolean existsByName(RoleType name);
}
</file>

<file path="src/main/java/com/online/course/management/project/repository/IUserRepository.java">
package com.online.course.management.project.repository;

import com.online.course.management.project.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;


import java.util.Optional;

@Repository
public interface IUserRepository extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> {
    Optional<User> findByUsername(String username);

    Optional<User> findByEmail(String email);

    Optional<User> findByUsernameOrEmail(String username, String email);

    boolean existsByUsername(String username);

    boolean existsByEmail(String email);


    @Query("SELECT u FROM User u LEFT JOIN FETCH u.userRoles WHERE u.username = :username OR u.email = :email")
    Optional<User> findByUsernameOrEmailWithRoles(@Param("username") String username, @Param("email") String email);
}
</file>

<file path="src/main/java/com/online/course/management/project/repository/IUserRoleRepository.java">
package com.online.course.management.project.repository;

import com.online.course.management.project.entity.UserRole;
import com.online.course.management.project.entity.UserRoleId;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface IUserRoleRepository extends JpaRepository<UserRole, UserRoleId> {
    List<UserRole> findByUserId(Long userId);

    List<UserRole> findByRoleId(Long roleId);
}
</file>

<file path="src/main/java/com/online/course/management/project/security/CustomUserDetails.java">
package com.online.course.management.project.security;

import com.online.course.management.project.entity.User;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.stream.Collectors;

public class CustomUserDetails implements UserDetails {

    private final User user;

    public CustomUserDetails(User user) {
        this.user = user;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return user.getUserRoles().stream()
                .map(userRole -> new SimpleGrantedAuthority("ROLE_" + userRole.getRole().getName().name()))
                .collect(Collectors.toSet());
    }

    @Override
    public String getPassword() {
        return user.getPasswordHash();
    }

    @Override
    public String getUsername() {
        return user.getUsername();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return user.getDeletedAt() == null;
    }

    public Long getId() {
        return user.getId();
    }

    public String getEmail() {
        return user.getEmail();
    }

    public String getRealName() {
        return user.getRealName();
    }


    public User getUser() {
        return user;
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/security/CustomUserDetailsService.java">
package com.online.course.management.project.security;

import com.online.course.management.project.entity.User;
import com.online.course.management.project.repository.IUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final IUserRepository userRepository;

    @Autowired
    public CustomUserDetailsService(IUserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String usernameOrEmail) throws UsernameNotFoundException {
        User user = userRepository.findByUsernameOrEmailWithRoles(usernameOrEmail, usernameOrEmail)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with username or email: " + usernameOrEmail));

        return new CustomUserDetails(user);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/security/JwtAuthenticationEntryPoint.java">
package com.online.course.management.project.security;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.online.course.management.project.dto.ErrorResponseDTO;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.MediaType;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
        ErrorResponseDTO errorResponse = new ErrorResponseDTO("Unauthorized: Authentication token is missing or invalid", HttpServletResponse.SC_UNAUTHORIZED);

        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        response.setContentType(MediaType.APPLICATION_JSON_VALUE);

        objectMapper.writeValue(response.getOutputStream(), errorResponse);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/security/JwtUtil.java">
package com.online.course.management.project.security;

import io.jsonwebtoken.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secret;

    @Value("${jwt.expiration}")
    private Long expiration;

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
    }

    public Boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    public String generateToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, userDetails.getUsername());
    }

    private String createToken(Map<String, Object> claims, String subject) {
        return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + expiration * 1000))
                .signWith(SignatureAlgorithm.HS256, secret).compact();
    }

    // New method to validate token without UserDetails
    public Boolean validateToken(String token) {
        Jwts.parser().setSigningKey(secret).parseClaimsJws(token);
        return !isTokenExpired(token);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/security/RequiredRole.java">
package com.online.course.management.project.security;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface RequiredRole {
    String[] value();
}
</file>

<file path="src/main/java/com/online/course/management/project/security/UserSecurity.java">
package com.online.course.management.project.security;

import com.online.course.management.project.entity.User;
import com.online.course.management.project.repository.IUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

@Component("userSecurity")
public class UserSecurity {
    private final IUserRepository userRepository;

    @Autowired
    public UserSecurity(IUserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public boolean isUserOwner(Authentication authentication, Long userId) {
        String username = authentication.getName();
        User user = userRepository.findByUsername(username).orElse(null);
        return user != null && user.getId().equals(userId);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/service/impl/UserServiceImpl.java">
package com.online.course.management.project.service.impl;

import com.online.course.management.project.dto.UserDTOs;
import com.online.course.management.project.entity.Role;
import com.online.course.management.project.entity.User;
import com.online.course.management.project.enums.RoleType;
import com.online.course.management.project.exception.business.ForbiddenException;
import com.online.course.management.project.exception.business.ResourceNotFoundException;
import com.online.course.management.project.mapper.UserMapper;
import com.online.course.management.project.repository.IRoleRepository;
import com.online.course.management.project.repository.IUserRepository;
import com.online.course.management.project.service.interfaces.IUserService;
import com.online.course.management.project.utils.user.UserServiceUtils;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Service
@Slf4j
public class UserServiceImpl implements IUserService {

    private final IUserRepository userRepository;
    private final IRoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final UserMapper userMapper;
    private final UserServiceUtils userServiceUtils;

    @Autowired
    public UserServiceImpl(IUserRepository userRepository, IRoleRepository roleRepository, PasswordEncoder passwordEncoder, UserMapper userMapper, UserServiceUtils userServiceUtils) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
        this.userMapper = userMapper;
        this.userServiceUtils = userServiceUtils;
    }

    @Override
    @Transactional
    public UserDTOs.UserResponseDto registerUser(UserDTOs.UserRegistrationDto registrationDto) {
        log.info("Registering new user with email: {}", registrationDto.getEmail());
        userServiceUtils.validateNewUser(registrationDto);
        User user = userServiceUtils.createUserFromDto(registrationDto);
        userServiceUtils.assignDefaultRole(user);
        User savedUser = userRepository.save(user);

        log.info("User registered successfully with id: {}", savedUser.getId());
        return userMapper.toDto(savedUser);
    }


    @Override
    @Transactional
    public UserDTOs.UserResponseDto updateUserProfile(Long userId, UserDTOs.UpdateProfileDto updateProfileDto) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found"));

        userMapper.updateUserFromDto(updateProfileDto, user);

        if (updateProfileDto.getPassword() != null) {

            if (user.getUserRoles().stream().anyMatch(role -> role.getRole().getName() == RoleType.ADMIN)) {
                throw new ForbiddenException("Can not change password for admin user");
            }

            user.setPasswordHash(passwordEncoder.encode(updateProfileDto.getPassword()));
        }

        User updatedUser = userRepository.save(user);
        return userMapper.toDto(updatedUser);
    }

    /**
     * @param userId
     * @param newRoles
     * @param currentUserId
     */
    @Override
    @Transactional
    public Set<String> updateUserRoles(Long userId, Set<RoleType> newRoles, Long currentUserId) {

        log.info("Updating roles for user {}. New roles: {}", userId, newRoles);

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found"));


        boolean isInitialAdmin = "admin@gmail.com".equals(user.getEmail());
        boolean isCurrentlyAdmin = user.getUserRoles().stream()
                .anyMatch(userRole -> userRole.getRole().getName() == RoleType.ADMIN);
        boolean isAttemptingToAssignAdminRole = newRoles.contains(RoleType.ADMIN);

        // Prevent assigning ADMIN role to non-admin users
        if (!isCurrentlyAdmin && isAttemptingToAssignAdminRole) {
            throw new ForbiddenException("Cannot assign ADMIN role to a non-admin user");
        }

        boolean isRemovingAdminRole = isCurrentlyAdmin && !isAttemptingToAssignAdminRole;

        // Prevent removing ADMIN role from the initial admin account
        if (isInitialAdmin && isRemovingAdminRole) {
            throw new ForbiddenException("Cannot remove ADMIN role from the initial admin account");
        }

        // If the current user is updating their own roles
        if (userId.equals(currentUserId) && isRemovingAdminRole) {
            // Prevent users from removing their own ADMIN role
            throw new ForbiddenException("You cannot remove your own ADMIN role");

        }

        Set<Role> rolesToSet = newRoles.stream()
                .map(roleType -> roleRepository.findByName(roleType)
                        .orElseThrow(() -> new ResourceNotFoundException("Role not found: " + roleType)))
                .collect(Collectors.toSet());

        // log old roles of user
        log.info("Current user roles: {}", user.getUserRoles().stream()
                .map(ur -> ur.getRole().getName().name())
                .collect(Collectors.toSet()));

        // Clear existing roles and add new ones
        user.getUserRoles().clear();
        for (Role role : rolesToSet) {
            user.addRole(role);
        }

        User savedUser = userRepository.save(user);

        // Log the roles after saving
        Set<String> updatedRoles = savedUser.getUserRoles().stream()
                .map(userRole -> userRole.getRole().getName().name())
                .collect(Collectors.toSet());
        log.info("Updated roles for user {}: {}", userId, updatedRoles);

        return updatedRoles;
    }

    /**
     * @param pageable
     * @return
     */
    @Override
    public Page<UserDTOs.UserWithRolesResponseDto> getAllUsers(Pageable pageable) {
        Page<User> users = userRepository.findAll(pageable);
        return users.map(userMapper::toUserWithRolesDto);
    }


    @Override
    public Page<UserDTOs.UserWithRolesResponseDto> searchUsers(UserDTOs.UserSearchRequestDto searchUsersPayload, Pageable pageable) {
        Specification<User> querySpecification = userServiceUtils.createSpecification(searchUsersPayload);

        Page<User> users = userRepository.findAll(querySpecification, pageable);
        return users.map(userMapper::toUserWithRolesDto);
    }

    @Override
    public long countUsers(Optional<UserDTOs.UserSearchRequestDto> searchUsersPayload) {
        if (searchUsersPayload.isPresent()) {
            Specification<User> querySpecification = userServiceUtils.createSpecification(searchUsersPayload.get());
            return userRepository.count(querySpecification);
        } else {
            return userRepository.count();
        }
    }

    @Override
    @Cacheable(value = "users", key = "#id")
    public Optional<User> getUserById(Long id) {
        log.debug("Fetching user with id: {}", id);
        return userRepository.findById(id);
    }

    @Override
    public Optional<User> getUserByUsername(String username) {
        return userRepository.findByUsername(username);
    }

    @Override
    public Optional<User> getUserByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    @Override
    @Transactional
    @CacheEvict(value = "users", key = "#user.id")
    public User updateUser(User user) {
        log.info("Updating user with id: {}", user.getId());
        return userRepository.save(user);
    }

    @Override
    @Transactional
    public void softDeleteUser(Long id) {


        userRepository.findById(id).ifPresent(user -> {

            if (user.getUserRoles().stream().anyMatch(role -> role.getRole().getName() == RoleType.ADMIN)) {
                throw new ForbiddenException("Can not delete admin user");
            }

            user.setDeletedAt(LocalDateTime.now());
            userRepository.save(user);
        });
    }

    @Override
    public boolean existsByUsername(String username) {
        return userRepository.existsByUsername(username);
    }

    @Override
    public boolean existsByEmail(String email) {
        return userRepository.existsByEmail(email);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/service/interfaces/IUserService.java">
package com.online.course.management.project.service.interfaces;

import com.online.course.management.project.dto.UserDTOs;
import com.online.course.management.project.entity.User;
import com.online.course.management.project.enums.RoleType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Set;

public interface IUserService {
    UserDTOs.UserResponseDto registerUser(UserDTOs.UserRegistrationDto userRegistrationDto);

    Optional<User> getUserById(Long id);

    Optional<User> getUserByUsername(String username);

    Optional<User> getUserByEmail(String email);

    User updateUser(User user);

    void softDeleteUser(Long id);

    boolean existsByUsername(String username);

    boolean existsByEmail(String email);

    UserDTOs.UserResponseDto updateUserProfile(Long userId, UserDTOs.UpdateProfileDto updateProfileDto);

    Set<String> updateUserRoles(Long userId, Set<RoleType> roleNames, Long currentUserId);

    Page<UserDTOs.UserWithRolesResponseDto> getAllUsers(Pageable pageable);

    Page<UserDTOs.UserWithRolesResponseDto> searchUsers(
            UserDTOs.UserSearchRequestDto searchUsersPayload,
            Pageable pageable
    );

    long countUsers(Optional<UserDTOs.UserSearchRequestDto> searchUsersPayload);
}
</file>

<file path="src/main/java/com/online/course/management/project/utils/generator/JwtSecretGenerator.java">
package com.online.course.management.project.utils.generator;

import java.security.SecureRandom;
import java.util.Base64;

public class JwtSecretGenerator {
    public static void main(String[] args) {
        SecureRandom random = new SecureRandom();
        byte[] secret = new byte[32]; // 256 bits
        random.nextBytes(secret);
        String encodedSecret = Base64.getEncoder().encodeToString(secret);
        System.out.println("Generated JWT Secret Key: " + encodedSecret);
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/utils/user/UserControllerUtils.java">
package com.online.course.management.project.utils.user;

import com.online.course.management.project.enums.RoleType;
import com.online.course.management.project.exception.business.InvalidRoleInfoException;
import com.online.course.management.project.exception.business.UnauthorizedException;
import com.online.course.management.project.exception.business.account.EmailAlreadyExistsException;
import com.online.course.management.project.exception.business.account.WrongEmailPasswordException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.Set;

@Component
@Slf4j
public class UserControllerUtils {

    private final AuthenticationManager authenticationManager;

    public UserControllerUtils(AuthenticationManager authenticationManager) {
        this.authenticationManager = authenticationManager;
    }

    public Authentication authenticate(String usernameOrEmail, String password) {
        try {
            return authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(usernameOrEmail, password));
        } catch (AuthenticationException e) {
            log.error("Error during authentication", e);
            throw new WrongEmailPasswordException("Invalid username/email or password");
        }
    }

    public Set<RoleType> validateRoles(Set<String> roles) {
        Set<RoleType> validRoles = new HashSet<>();
        Set<String> invalidRoles = new HashSet<>();

        for (String role : roles) {
            try {
                validRoles.add(RoleType.valueOf(role.toUpperCase()));
            } catch (IllegalArgumentException e) {
                invalidRoles.add(role);
            }
        }

        if (!invalidRoles.isEmpty()) {
            throw new InvalidRoleInfoException("Invalid role(s) provided: " + String.join(", ", invalidRoles));
        }

        return validRoles;
    }
}
</file>

<file path="src/main/java/com/online/course/management/project/utils/user/UserServiceUtils.java">
package com.online.course.management.project.utils.user;

import com.online.course.management.project.dto.UserDTOs;
import com.online.course.management.project.entity.Role;
import com.online.course.management.project.entity.User;
import com.online.course.management.project.enums.RoleType;
import com.online.course.management.project.enums.UserStatus;
import com.online.course.management.project.exception.business.account.AccountException;
import com.online.course.management.project.exception.business.ResourceNotFoundException;
import com.online.course.management.project.exception.business.account.EmailAlreadyExistsException;
import com.online.course.management.project.mapper.UserMapper;
import com.online.course.management.project.repository.IRoleRepository;
import com.online.course.management.project.repository.IUserRepository;
import jakarta.persistence.criteria.Predicate;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
@Slf4j
public class UserServiceUtils {
    private final IUserRepository userRepository;
    private final IRoleRepository roleRepository;
    private final UserMapper userMapper;
    private final PasswordEncoder passwordEncoder;


    public UserServiceUtils(IUserRepository userRepository, IRoleRepository roleRepository, UserMapper userMapper, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.userMapper = userMapper;
        this.passwordEncoder = passwordEncoder;

    }

    public String generateUsernameFromEmail(String email) {
        String baseUsername = email.split("@")[0];
        String username = baseUsername;
        int suffix = 1;

        while (userRepository.existsByUsername(username)) {
            username = baseUsername + suffix;
            suffix++;
        }

        return username;
    }

    public void assignDefaultRole(User user) {
        Role userRole = roleRepository.findByName(RoleType.USER)
                .orElseThrow(() -> new ResourceNotFoundException("Default user role not found"));
        user.addRole(userRole);
    }

    public void validateNewUser(UserDTOs.UserRegistrationDto registrationDto) {
        if (userRepository.existsByEmail(registrationDto.getEmail())) {
            throw new EmailAlreadyExistsException("Email already exists: " + registrationDto.getEmail());
        }
    }

    public User createUserFromDto(UserDTOs.UserRegistrationDto registrationDto) {
        User user = userMapper.toEntity(registrationDto);
        user.setUsername(generateUsernameFromEmail(registrationDto.getEmail()));
        user.setPasswordHash(passwordEncoder.encode(registrationDto.getPassword()));
        return user;
    }

    public Specification<User> createSpecification(UserDTOs.UserSearchRequestDto searchUsersPayload) {
        return (root, query, criteriaBuilder) -> {
            List<Predicate> predicates = new ArrayList<>();

            if (searchUsersPayload.getUsername() != null && !searchUsersPayload.getUsername().isEmpty()) {
                predicates.add(criteriaBuilder.like(criteriaBuilder.lower(root.get("username")), "%" + searchUsersPayload.getUsername().toLowerCase() + "%"));
            }
            if (searchUsersPayload.getEmail() != null && !searchUsersPayload.getEmail().isEmpty()) {
                predicates.add(criteriaBuilder.like(criteriaBuilder.lower(root.get("email")), "%" + searchUsersPayload.getEmail().toLowerCase() + "%"));
            }
            if (searchUsersPayload.getRealName() != null && !searchUsersPayload.getRealName().isEmpty()) {
                predicates.add(criteriaBuilder.like(criteriaBuilder.lower(root.get("realName")), "%" + searchUsersPayload.getRealName().toLowerCase() + "%"));
            }
            if (searchUsersPayload.getStatus() != null && !searchUsersPayload.getStatus().isEmpty()) {
                predicates.add(criteriaBuilder.equal(root.get("status"), UserStatus.valueOf(searchUsersPayload.getStatus().toUpperCase())));
            }
            if (searchUsersPayload.getFromDate() != null) {
                predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("createdAt"), searchUsersPayload.getFromDate()));
            }
            if (searchUsersPayload.getToDate() != null) {
                predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("createdAt"), searchUsersPayload.getToDate()));
            }

            return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
        };
    }


}
</file>

<file path="src/main/resources/application.properties">
spring.datasource.url=jdbc:mysql://localhost:3306/onlinecoursemanagement
spring.datasource.username=Huyvictory
spring.datasource.password=12345
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# JPA / Hibernate properties
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true
# Flyway configuration
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-version=4
spring.flyway.baseline-on-migrate=true
# Logging
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.root=INFO
logging.level.org.springframework.security=DEBUG
logging.level.com.online.course.management.project=DEBUG
logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %clr([%X{class}]){yellow} %clr([%X{method}]){yellow} %m%n%wEx
# JWT configuration
jwt.secret=tfHDo2eVbfqEZFAjEisFcgGpdyUuB7OrmqkW2J++4CY=
jwt.expiration=3600
# Cache configuration
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=500,expireAfterWrite=60m
# Output
spring.output.ansi.enabled=ALWAYS
</file>

<file path="src/main/resources/db/migration/V2__Update_User_table.sql">
-- V2__Update_user_table.sql

-- Rename 'name' column to 'real_name' if it exists
SET @renameColumn = (SELECT IF(
                                    EXISTS(SELECT *
                                           FROM information_schema.COLUMNS
                                           WHERE TABLE_SCHEMA = DATABASE()
                                             AND TABLE_NAME = 'users'
                                             AND COLUMN_NAME = 'name'),
                                    'ALTER TABLE users CHANGE COLUMN name real_name VARCHAR(100)',
                                    'SELECT 1'
                            ));
PREPARE renameStmt FROM @renameColumn;
EXECUTE renameStmt;
DEALLOCATE PREPARE renameStmt;

-- Add 'real_name' column if it doesn't exist
SET @addColumn = (SELECT IF(
                                 NOT EXISTS(SELECT *
                                            FROM information_schema.COLUMNS
                                            WHERE TABLE_SCHEMA = DATABASE()
                                              AND TABLE_NAME = 'users'
                                              AND COLUMN_NAME = 'real_name'),
                                 'ALTER TABLE users ADD COLUMN real_name VARCHAR(100)',
                                 'SELECT 1'
                         ));
PREPARE addStmt FROM @addColumn;
EXECUTE addStmt;
DEALLOCATE PREPARE addStmt;

-- Add other new columns if they don't exist
SET @addCreatedAt = (SELECT IF(
                                    NOT EXISTS(SELECT *
                                               FROM information_schema.COLUMNS
                                               WHERE TABLE_SCHEMA = DATABASE()
                                                 AND TABLE_NAME = 'users'
                                                 AND COLUMN_NAME = 'created_at'),
                                    'ALTER TABLE users ADD COLUMN created_at DATETIME',
                                    'SELECT 1'
                            ));
PREPARE addCreatedAtStmt FROM @addCreatedAt;
EXECUTE addCreatedAtStmt;
DEALLOCATE PREPARE addCreatedAtStmt;

SET @addUpdatedAt = (SELECT IF(
                                    NOT EXISTS(SELECT *
                                               FROM information_schema.COLUMNS
                                               WHERE TABLE_SCHEMA = DATABASE()
                                                 AND TABLE_NAME = 'users'
                                                 AND COLUMN_NAME = 'updated_at'),
                                    'ALTER TABLE users ADD COLUMN updated_at DATETIME',
                                    'SELECT 1'
                            ));
PREPARE addUpdatedAtStmt FROM @addUpdatedAt;
EXECUTE addUpdatedAtStmt;
DEALLOCATE PREPARE addUpdatedAtStmt;

SET @addDeletedAt = (SELECT IF(
                                    NOT EXISTS(SELECT *
                                               FROM information_schema.COLUMNS
                                               WHERE TABLE_SCHEMA = DATABASE()
                                                 AND TABLE_NAME = 'users'
                                                 AND COLUMN_NAME = 'deleted_at'),
                                    'ALTER TABLE users ADD COLUMN deleted_at DATETIME',
                                    'SELECT 1'
                            ));
PREPARE addDeletedAtStmt FROM @addDeletedAt;
EXECUTE addDeletedAtStmt;
DEALLOCATE PREPARE addDeletedAtStmt;

-- Modify existing columns
ALTER TABLE users
    MODIFY COLUMN username VARCHAR(50) NOT NULL,
    MODIFY COLUMN email VARCHAR(320) NOT NULL,
    MODIFY COLUMN password_hash VARCHAR(60) NOT NULL;

-- Add unique constraints if they don't exist
SET @addUsernameConstraint = (SELECT IF(
                                             NOT EXISTS(SELECT *
                                                        FROM information_schema.TABLE_CONSTRAINTS
                                                        WHERE CONSTRAINT_SCHEMA = DATABASE()
                                                          AND TABLE_NAME = 'users'
                                                          AND CONSTRAINT_NAME = 'uk_users_username'),
                                             'ALTER TABLE users ADD CONSTRAINT uk_users_username UNIQUE (username)',
                                             'SELECT 1'
                                     ));
PREPARE usernameConstraintStmt FROM @addUsernameConstraint;
EXECUTE usernameConstraintStmt;
DEALLOCATE PREPARE usernameConstraintStmt;

SET @addEmailConstraint = (SELECT IF(
                                          NOT EXISTS(SELECT *
                                                     FROM information_schema.TABLE_CONSTRAINTS
                                                     WHERE CONSTRAINT_SCHEMA = DATABASE()
                                                       AND TABLE_NAME = 'users'
                                                       AND CONSTRAINT_NAME = 'uk_users_email'),
                                          'ALTER TABLE users ADD CONSTRAINT uk_users_email UNIQUE (email)',
                                          'SELECT 1'
                                  ));
PREPARE emailConstraintStmt FROM @addEmailConstraint;
EXECUTE emailConstraintStmt;
DEALLOCATE PREPARE emailConstraintStmt;

-- Update existing rows to set created_at and updated_at if they are NULL
UPDATE users
SET created_at = NOW(),
    updated_at = NOW()
WHERE created_at IS NULL
   OR updated_at IS NULL;
</file>

<file path="src/main/resources/db/migration/V3__Add_status_to_users.sql">
-- V3__Add_status_to_users.sql

-- Add status column if it doesn't exist
SET
@addStatus = (SELECT IF(
    NOT EXISTS(
        SELECT * FROM information_schema.COLUMNS
        WHERE TABLE_SCHEMA = DATABASE()
        AND TABLE_NAME = 'users'
        AND COLUMN_NAME = 'status'
    ),
    'ALTER TABLE users ADD COLUMN status VARCHAR(20) NOT NULL DEFAULT "ACTIVE"',
    'SELECT 1'
));

PREPARE addStatusStmt FROM @addStatus;
EXECUTE addStatusStmt;
DEALLOCATE PREPARE addStatusStmt;

-- Update existing rows to set status if they are NULL
UPDATE users
SET status = 'ACTIVE'
WHERE status IS NULL;

-- Add constraint to ensure status is one of the allowed values
ALTER TABLE users
    ADD CONSTRAINT chk_users_status
        CHECK (status IN ('ACTIVE', 'INACTIVE', 'SUSPENDED'));
</file>

<file path="src/main/resources/db/migration/V4__Add_course_and_category_tables.sql">
-- V4__Add_course_and_category_tables.sql

-- Drop any tables that might have been partially created
DROP TABLE IF EXISTS course_categories;
DROP TABLE IF EXISTS courses;
DROP TABLE IF EXISTS categories;

-- Create Categories table if not exists
SET @createCategories = (SELECT IF(
                                        NOT EXISTS(SELECT *
                                                   FROM information_schema.TABLES
                                                   WHERE TABLE_SCHEMA = DATABASE()
                                                     AND TABLE_NAME = 'categories'),
                                        'CREATE TABLE categories (
                                            id BIGINT AUTO_INCREMENT PRIMARY KEY,
                                            name VARCHAR(100) NOT NULL UNIQUE,
                                            created_at DATETIME NOT NULL,
                                            updated_at DATETIME NOT NULL,
                                            deleted_at DATETIME
                                        )',
                                        'SELECT 1'
                                ));

PREPARE createCategoriesStmt FROM @createCategories;
EXECUTE createCategoriesStmt;
DEALLOCATE PREPARE createCategoriesStmt;

-- Create Courses table if not exists
SET @createCourses = (SELECT IF(
                                     NOT EXISTS(SELECT *
                                                FROM information_schema.TABLES
                                                WHERE TABLE_SCHEMA = DATABASE()
                                                  AND TABLE_NAME = 'courses'),
                                     'CREATE TABLE courses (
                                         id BIGINT AUTO_INCREMENT PRIMARY KEY,
                                         title VARCHAR(255) NOT NULL,
                                         description TEXT,
                                         instructor_id BIGINT NOT NULL,
                                         status VARCHAR(20) NOT NULL,
                                         created_at DATETIME NOT NULL,
                                         updated_at DATETIME NOT NULL,
                                         deleted_at DATETIME,
                                         FOREIGN KEY (instructor_id) REFERENCES users(id),
                                         CONSTRAINT chk_courses_status CHECK (status IN ("DRAFT", "PUBLISHED", "ARCHIVED"))
                                     )',
                                     'SELECT 1'
                             ));

PREPARE createCoursesStmt FROM @createCourses;
EXECUTE createCoursesStmt;
DEALLOCATE PREPARE createCoursesStmt;

-- Create Course_Categories junction table if not exists
SET @createCourseCategories = (SELECT IF(
                                              NOT EXISTS(SELECT *
                                                         FROM information_schema.TABLES
                                                         WHERE TABLE_SCHEMA = DATABASE()
                                                           AND TABLE_NAME = 'course_categories'),
                                              'CREATE TABLE course_categories (
                                                  course_id BIGINT NOT NULL,
                                                  category_id BIGINT NOT NULL,
                                                  PRIMARY KEY (course_id, category_id),
                                                  FOREIGN KEY (course_id) REFERENCES courses(id),
                                                  FOREIGN KEY (category_id) REFERENCES categories(id)
                                              )',
                                              'SELECT 1'
                                      ));

PREPARE createCourseCategoriesStmt FROM @createCourseCategories;
EXECUTE createCourseCategoriesStmt;
DEALLOCATE PREPARE createCourseCategoriesStmt;
</file>

<file path="src/main/resources/db/migration/V5__Add_indexes_to_course_and_category.sql">
-- V5__Add_indexes_to_course_and_category.sql

-- Add index for instructor_id in courses table
CREATE INDEX idx_courses_instructor ON courses(instructor_id);

-- Add index for status in courses table
CREATE INDEX idx_courses_status ON courses(status);

-- Add index for deleted_at in courses table
CREATE INDEX idx_courses_deleted_at ON courses(deleted_at);

-- Add index for deleted_at in categories table
CREATE INDEX idx_categories_deleted_at ON categories(deleted_at);

-- Add index for name in categories table for faster lookups
CREATE INDEX idx_categories_name ON categories(name);
</file>

<file path="src/test/java/com/online/course/management/project/config/SecurityTestConfig.java">
package com.online.course.management.project.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.online.course.management.project.dto.ErrorResponseDTO;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.http.MediaType;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@TestConfiguration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityTestConfig {

    @Bean
    public ObjectMapper objectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JavaTimeModule());
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        return mapper;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http, ObjectMapper objectMapper) throws Exception {
        http
                .csrf(csrf -> csrf.disable())
                .sessionManagement(session ->
                        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                )
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/api/v1/users/register", "/api/v1/users/login").permitAll()
                        .anyRequest().authenticated()
                )
                .addFilterBefore(new OncePerRequestFilter() {
                    @Override
                    protected void doFilterInternal(HttpServletRequest request,
                                                    HttpServletResponse response,
                                                    FilterChain filterChain) throws ServletException, IOException {
                        String authHeader = request.getHeader("Authorization");
                        if (authHeader != null && authHeader.startsWith("Bearer ")) {
                            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                            response.setContentType(MediaType.APPLICATION_JSON_VALUE);
                            ErrorResponseDTO errorResponse = new ErrorResponseDTO(
                                    "Invalid token",
                                    HttpServletResponse.SC_UNAUTHORIZED
                            );
                            objectMapper.writeValue(response.getOutputStream(), errorResponse);
                            return;
                        }
                        filterChain.doFilter(request, response);
                    }
                }, UsernamePasswordAuthenticationFilter.class)
                .exceptionHandling(ex -> ex
                        .authenticationEntryPoint((request, response, authException) -> {
                            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                            response.setContentType(MediaType.APPLICATION_JSON_VALUE);
                            objectMapper.writeValue(
                                    response.getOutputStream(),
                                    new ErrorResponseDTO("Unauthorized", HttpServletResponse.SC_UNAUTHORIZED)
                            );
                        })
                );

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
</file>

<file path="src/test/java/com/online/course/management/project/controller/UserControllerTest.java">
package com.online.course.management.project.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.online.course.management.project.aspect.RoleAuthorizationAspect;
import com.online.course.management.project.config.SecurityTestConfig;
import com.online.course.management.project.dto.PaginationDto;
import com.online.course.management.project.dto.UserDTOs;
import com.online.course.management.project.entity.Role;
import com.online.course.management.project.entity.User;
import com.online.course.management.project.enums.RoleType;
import com.online.course.management.project.mapper.UserMapper;
import com.online.course.management.project.security.CustomUserDetails;
import com.online.course.management.project.security.CustomUserDetailsService;
import com.online.course.management.project.security.JwtUtil;
import com.online.course.management.project.service.interfaces.IUserService;
import com.online.course.management.project.utils.user.UserControllerUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.annotation.Import;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;

import org.springframework.test.web.servlet.MockMvc;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.web.servlet.ResultActions;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.authentication;
import static org.hamcrest.Matchers.containsInAnyOrder;

import java.util.*;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(UserController.class)
@Import({SecurityTestConfig.class, RoleAuthorizationAspect.class})  // Add RoleAuthorizationAspect
@EnableAspectJAutoProxy(proxyTargetClass = true)
class UserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private IUserService userService;

    @MockBean
    private UserMapper userMapper;


    @MockBean
    private CustomUserDetailsService customUserDetailsService;

    @MockBean
    private JwtUtil jwtUtil;

    @MockBean
    private UserControllerUtils userControllerUtils;

    private ObjectMapper objectMapper;

    @BeforeEach
    void setUp() {
        objectMapper = new ObjectMapper();
    }

    private ResultActions performDeleteWithRole(Long userId, String roleType) throws Exception {
        // Create Role entity
        Role role = new Role();
        role.setName(RoleType.valueOf(roleType));

        // Create User entity with role
        User mockUser = new User();
        mockUser.setId(1L);
        mockUser.setUsername(roleType.toLowerCase());
        mockUser.setEmail(roleType.toLowerCase() + "@example.com");
        mockUser.addRole(role);  // Important: Add role to user entity

        // Create CustomUserDetails
        CustomUserDetails userDetails = new CustomUserDetails(mockUser);

        // Create Authentication with both principal and authorities
        List<GrantedAuthority> authorities = List.of(
                new SimpleGrantedAuthority("ROLE_" + roleType)
        );
        Authentication auth = new UsernamePasswordAuthenticationToken(
                userDetails,  // This must be CustomUserDetails with proper User entity
                null,
                authorities
        );

        // Set up SecurityContext
        SecurityContext securityContext = mock(SecurityContext.class);
        when(securityContext.getAuthentication()).thenReturn(auth);
        SecurityContextHolder.setContext(securityContext);

        // Perform request with authentication
        return mockMvc.perform(delete("/api/v1/users/{id}", userId)
                .with(authentication(auth)));
    }

    @Test
    void registerUser_Success() throws Exception {
        // Arrange
        UserDTOs.UserRegistrationDto registrationDto = new UserDTOs.UserRegistrationDto();
        registrationDto.setEmail("test@example.com");
        registrationDto.setPassword("password123");

        UserDTOs.UserResponseDto responseDto = new UserDTOs.UserResponseDto();
        responseDto.setId(1L);
        responseDto.setEmail("test@example.com");
        responseDto.setUsername("test");

        when(userService.registerUser(any(UserDTOs.UserRegistrationDto.class)))
                .thenReturn(responseDto);

        // Act & Assert
        mockMvc.perform(post("/api/v1/users/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(registrationDto)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.email").value("test@example.com"));
    }

    @Test
    void loginUser_Success() throws Exception {
        // Arrange
        UserDTOs.UserLoginDto loginDto = new UserDTOs.UserLoginDto();
        loginDto.setUsernameOrEmail("test@example.com");
        loginDto.setPassword("password123");

        CustomUserDetails userDetails = mock(CustomUserDetails.class);
        Authentication authentication = new UsernamePasswordAuthenticationToken(userDetails, null);
        String token = "test-jwt-token";

        when(userControllerUtils.authenticate(anyString(), anyString())).thenReturn(authentication);
        when(jwtUtil.generateToken(any(CustomUserDetails.class))).thenReturn(token);

        // Act & Assert
        mockMvc.perform(post("/api/v1/users/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.token").value(token));
    }

    @Test
    void updateUserRoles_Success() throws Exception {
        // Arrange
        Long userId = 1L;
        Set<String> roles = new HashSet<>();
        roles.add("USER");
        roles.add("INSTRUCTOR");

        UserDTOs.UpdateUserRolesDto updateRolesDto = new UserDTOs.UpdateUserRolesDto();
        updateRolesDto.setRoles(roles);

        Role adminRole = new Role();
        adminRole.setName(RoleType.ADMIN);

        // Create CustomUserDetails instead of using default User
        User mockUser = new User();
        mockUser.setId(1L);
        mockUser.setUsername("admin");
        mockUser.setEmail("admin@example.com");
        mockUser.addRole(adminRole);
        CustomUserDetails userDetails = new CustomUserDetails(mockUser);
        Authentication auth = new UsernamePasswordAuthenticationToken(
                userDetails,
                null,
                Collections.singleton(new SimpleGrantedAuthority("ROLE_ADMIN"))
        );

        // Mock the SecurityContext
        SecurityContext securityContext = mock(SecurityContext.class);
        when(securityContext.getAuthentication()).thenReturn(auth);
        SecurityContextHolder.setContext(securityContext);

        // Mock the validateRoles method
        when(userControllerUtils.validateRoles(anySet())).thenReturn(
                new HashSet<>(Arrays.asList(RoleType.USER, RoleType.INSTRUCTOR))
        );

        // Mock the service call
        when(userService.updateUserRoles(eq(userId), anySet(), any())).thenReturn(roles);

        // Act & Assert
        mockMvc.perform(put("/api/v1/users/{id}/roles", userId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(updateRolesDto))
                        .with(authentication(auth))) // Add authentication to the request
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Roles updated successfully"))
                .andExpect(jsonPath("$.updatedRoles").isArray())
                .andExpect(jsonPath("$.updatedRoles", containsInAnyOrder("USER", "INSTRUCTOR")));

        verify(userService).updateUserRoles(eq(userId), any(), eq(1L));
    }


    @Test
    void deleteUser_RoleBasedAccess() throws Exception {
        Long userId = 1L;
        doNothing().when(userService).softDeleteUser(userId);

        // Test ADMIN access
        performDeleteWithRole(userId, "ADMIN")
                .andExpect(status().isNoContent());

        // Test USER access
        performDeleteWithRole(userId, "USER")
                .andExpect(status().isForbidden());

        // Test INSTRUCTOR access
        performDeleteWithRole(userId, "INSTRUCTOR")
                .andExpect(status().isForbidden());
    }

    @Test
    void deleteUser_Unauthorized() throws Exception {
        // Arrange
        Long userId = 1L;

        // Act & Assert
        mockMvc.perform(delete("/api/v1/users/{id}", userId)
                        .header("Authorization", "Bearer invalid-token"))
                .andDo(print())
                .andExpect(status().isUnauthorized());

        verify(userService, never()).softDeleteUser(anyLong());
    }

    @Test
    void getAllUsers_Success() throws Exception {
        // Arrange

        Role adminRole = new Role();
        adminRole.setName(RoleType.ADMIN);

        // Create CustomUserDetails instead of using default User
        User mockUser = new User();
        mockUser.setId(1L);
        mockUser.setUsername("admin");
        mockUser.setEmail("admin@example.com");
        mockUser.addRole(adminRole);

        CustomUserDetails userDetails = new CustomUserDetails(mockUser);
        Authentication auth = new UsernamePasswordAuthenticationToken(
                userDetails,
                null,
                Collections.singleton(new SimpleGrantedAuthority("ROLE_ADMIN"))
        );

        // Mock the SecurityContext
        SecurityContext securityContext = mock(SecurityContext.class);
        when(securityContext.getAuthentication()).thenReturn(auth);
        SecurityContextHolder.setContext(securityContext);

        // Mock pagination request
        PaginationDto.PaginationRequestDto paginationRequest = new PaginationDto.PaginationRequestDto();
        paginationRequest.setPage(1);
        paginationRequest.setLimit(10);

        PageRequest pageRequest = PageRequest.of(0, 10);
        when(userService.getAllUsers(any()))
                .thenReturn(new PageImpl<>(new ArrayList<>(), pageRequest, 0));
        when(userService.countUsers(any())).thenReturn(0L);

        // Act & Assert
        mockMvc.perform(get("/api/v1/users/all")
                        .param("page", "1")
                        .param("limit", "10"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.currentPage").value(1))
                .andExpect(jsonPath("$.limit").value(10))
                .andExpect(jsonPath("$.total").value(0))
                .andExpect(jsonPath("$.data").isArray());
    }
}
</file>

<file path="src/test/java/com/online/course/management/project/dto/UserDTOsValidationTest.java">
package com.online.course.management.project.dto;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

public class UserDTOsValidationTest {
    private Validator validator;

    @BeforeEach
    void setUp() {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Test
    void userRegistrationDto_ValidData() {
        UserDTOs.UserRegistrationDto dto = new UserDTOs.UserRegistrationDto();
        dto.setEmail("test@example.com");
        dto.setPassword("password123");

        Set<ConstraintViolation<UserDTOs.UserRegistrationDto>> violations = validator.validate(dto);
        assertTrue(violations.isEmpty());
    }

    @Test
    void userRegistrationDto_InvalidEmail() {
        UserDTOs.UserRegistrationDto dto = new UserDTOs.UserRegistrationDto();
        dto.setEmail("invalid-email");
        dto.setPassword("password123");

        Set<ConstraintViolation<UserDTOs.UserRegistrationDto>> violations = validator.validate(dto);
        assertFalse(violations.isEmpty());
        assertEquals(1, violations.size());
        assertEquals("must be a well-formed email address", violations.iterator().next().getMessage());
    }

    @Test
    void userRegistrationDto_EmptyEmail() {
        UserDTOs.UserRegistrationDto dto = new UserDTOs.UserRegistrationDto();
        dto.setPassword("password123");

        Set<ConstraintViolation<UserDTOs.UserRegistrationDto>> violations = validator.validate(dto);
        assertFalse(violations.isEmpty());
        assertEquals(1, violations.size());
        assertEquals("must not be blank", violations.iterator().next().getMessage());
    }

    @Test
    void userRegistrationDto_PasswordTooShort() {
        UserDTOs.UserRegistrationDto dto = new UserDTOs.UserRegistrationDto();
        dto.setEmail("test@example.com");
        dto.setPassword("short");

        Set<ConstraintViolation<UserDTOs.UserRegistrationDto>> violations = validator.validate(dto);
        assertFalse(violations.isEmpty());
        assertEquals(1, violations.size());
        assertEquals("Password must be between 6 and 40 characters", violations.iterator().next().getMessage());
    }

    @Test
    void userRegistrationDto_PasswordTooLong() {
        UserDTOs.UserRegistrationDto dto = new UserDTOs.UserRegistrationDto();
        dto.setEmail("test@example.com");
        dto.setPassword("a".repeat(41));

        Set<ConstraintViolation<UserDTOs.UserRegistrationDto>> violations = validator.validate(dto);
        assertFalse(violations.isEmpty());
        assertEquals(1, violations.size());
        assertEquals("Password must be between 6 and 40 characters", violations.iterator().next().getMessage());
    }
}
</file>

<file path="src/test/java/com/online/course/management/project/ProjectApplicationTests.java">
package com.online.course.management.project;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ProjectApplicationTests {

    @Test
    void contextLoads() {
    }

}
</file>

<file path="src/test/java/com/online/course/management/project/service/impl/UserServiceImplTest.java">
package com.online.course.management.project.service.impl;

import com.online.course.management.project.dto.UserDTOs;

import com.online.course.management.project.entity.Role;
import com.online.course.management.project.entity.User;

import com.online.course.management.project.enums.RoleType;
import com.online.course.management.project.enums.UserStatus;
import com.online.course.management.project.exception.business.ForbiddenException;
import com.online.course.management.project.exception.business.account.EmailAlreadyExistsException;
import com.online.course.management.project.mapper.UserMapper;

import com.online.course.management.project.repository.IRoleRepository;
import com.online.course.management.project.repository.IUserRepository;
import com.online.course.management.project.utils.user.UserServiceUtils;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;

import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;


import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@Slf4j
public class UserServiceImplTest {

    @Mock
    private IUserRepository userRepository;
    @Mock
    private IRoleRepository roleRepository;
    @Mock
    private UserMapper userMapper;
    @Mock
    private UserServiceUtils userServiceUtils;

    @InjectMocks
    private UserServiceImpl userService;

    @Test
    void registerUser_SuccessfulRegistration() {
        UserDTOs.UserRegistrationDto registrationDto = new UserDTOs.UserRegistrationDto();
        registrationDto.setEmail("test@example.com");
        registrationDto.setPassword("password123");

        User user = new User();
        user.setId(1L);
        user.setEmail("test@example.com");
        user.setUsername("testuser");
        user.setStatus(UserStatus.ACTIVE);

        UserDTOs.UserResponseDto userResponseDto = new UserDTOs.UserResponseDto();
        userResponseDto.setId(1L);
        userResponseDto.setEmail("test@example.com");
        userResponseDto.setUsername("test");
        userResponseDto.setStatus("ACTIVE");

        when(userServiceUtils.createUserFromDto(any())).thenReturn(user);
        when(userRepository.save(any(User.class))).thenReturn(user);
        when(userMapper.toDto(any(User.class))).thenReturn(userResponseDto);

        UserDTOs.UserResponseDto result = userService.registerUser(registrationDto);

        assertNotNull(result);
        assertEquals("test@example.com", result.getEmail());
        assertEquals("test", result.getUsername());
        verify(userServiceUtils).validateNewUser(registrationDto);
        verify(userServiceUtils).createUserFromDto(registrationDto);
        verify(userServiceUtils).assignDefaultRole(user);
        verify(userRepository).save(user);
    }

    @Test
    void registerUser_EmailAlreadyExists() {
        UserDTOs.UserRegistrationDto registrationDto = new UserDTOs.UserRegistrationDto();
        registrationDto.setEmail("existing@example.com");
        registrationDto.setPassword("password123");

        doThrow(new EmailAlreadyExistsException("Email already exists"))
                .when(userServiceUtils).validateNewUser(any());

        assertThrows(EmailAlreadyExistsException.class, () -> userService.registerUser(registrationDto));
    }

    @Test
    void updateUserRoles_AssignAdminToNonAdmin_ThrowsForbiddenException() {
        Long userId = 1L;
        Long currentUserId = 2L;
        Set<RoleType> newRoles = new HashSet<>(Collections.singletonList(RoleType.ADMIN));

        User normalUser = new User();
        normalUser.setId(userId);

        User adminUser = new User();
        adminUser.setId(currentUserId);
        Role adminRole = new Role();
        adminRole.setName(RoleType.ADMIN);
        adminUser.addRole(adminRole);

        when(userRepository.findById(userId)).thenReturn(Optional.of(normalUser));
//        when(userRepository.findById(currentUserId)).thenReturn(Optional.of(adminUser));

        assertThrows(ForbiddenException.class, () -> userService.updateUserRoles(userId, newRoles, currentUserId));
    }

    @Test
    void updateUserRoles_RemoveAdminFromInitialAdmin_ThrowsForbiddenException() {
        Long userId = 1L;
        Long currentUserId = 2L;
        Set<RoleType> newRoles = new HashSet<>(Collections.singletonList(RoleType.USER));

        User initialAdminUser = new User();
        initialAdminUser.setId(userId);
        initialAdminUser.setEmail("admin@gmail.com");
        Role adminRole = new Role();
        adminRole.setName(RoleType.ADMIN);
        initialAdminUser.addRole(adminRole);

        User adminUser = new User();
        adminUser.setId(currentUserId);
        adminUser.addRole(adminRole);

        when(userRepository.findById(userId)).thenReturn(Optional.of(initialAdminUser));

        assertThrows(ForbiddenException.class, () -> userService.updateUserRoles(userId, newRoles, currentUserId));
    }

    @Test
    void updateUserRoles_AdminRemovingOwnAdminRole_ThrowsForbiddenException() {
        Long userId = 2L;
        Set<RoleType> newRoles = new HashSet<>(Collections.singletonList(RoleType.USER));

        User adminUser = new User();
        adminUser.setId(userId);
        Role adminRole = new Role();
        adminRole.setName(RoleType.ADMIN);
        adminUser.addRole(adminRole);

        when(userRepository.findById(userId)).thenReturn(Optional.of(adminUser));

        assertThrows(ForbiddenException.class, () -> userService.updateUserRoles(userId, newRoles, userId));
    }


    @Test
    void updateUserRoles_SuccessfulUpdate() {
        Long userId = 1L;
        Long currentUserId = 2L;
        Set<RoleType> newRoles = new HashSet<>(Arrays.asList(RoleType.USER, RoleType.INSTRUCTOR));

        Role userRole = new Role();
        userRole.setId(1L);
        userRole.setName(RoleType.USER);

        Role instructorRole = new Role();
        instructorRole.setId(2L);
        instructorRole.setName(RoleType.INSTRUCTOR);

        Role adminRole = new Role();
        adminRole.setId(3L);
        adminRole.setName(RoleType.ADMIN);

        User normalUser = new User();
        normalUser.setId(userId);
        normalUser.addRole(userRole);

        User adminUser = new User();
        adminUser.setId(currentUserId);
        adminUser.addRole(adminRole);

        when(userRepository.findById(userId)).thenReturn(Optional.of(normalUser));
        //when(userRepository.findById(currentUserId)).thenReturn(Optional.of(adminUser));
        when(roleRepository.findByName(RoleType.USER)).thenReturn(Optional.of(userRole));
        when(roleRepository.findByName(RoleType.INSTRUCTOR)).thenReturn(Optional.of(instructorRole));

        // This is the key change
        when(userRepository.save(any(User.class))).thenAnswer(invocation -> {
            User savedUser = invocation.getArgument(0);
            // Clear existing roles and add new ones to simulate actual persistence
            savedUser.getUserRoles().clear();
            for (RoleType role : newRoles) {
                if (role == RoleType.USER) {
                    savedUser.addRole(userRole);
                }
                if (role == RoleType.INSTRUCTOR) {
                    savedUser.addRole(instructorRole);
                }
            }
            return savedUser;
        });

        Set<String> result = userService.updateUserRoles(userId, newRoles, currentUserId);

        log.info("Updated roles: {}", result);

        assertEquals(2, result.size(), "Expected 2 roles, but got: " + result.size() + " roles: " + result);
        assertTrue(result.contains("USER"), "USER role is missing from the result");
        assertTrue(result.contains("INSTRUCTOR"), "INSTRUCTOR role is missing from the result");
        verify(userRepository).save(any(User.class));
    }

    @Test
    void getAllUsers_SuccessfulRetrieval() {
        User user = new User();
        user.setId(1L);
        user.setEmail("test@example.com");
        user.setUsername("testuser");
        user.setStatus(UserStatus.ACTIVE);

        Page<User> userPage = new PageImpl<>(Collections.singletonList(user));
        when(userRepository.findAll(any(Pageable.class))).thenReturn(userPage);
        when(userMapper.toUserWithRolesDto(any(User.class))).thenReturn(new UserDTOs.UserWithRolesResponseDto());

        Page<UserDTOs.UserWithRolesResponseDto> result = userService.getAllUsers(Pageable.unpaged());

        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
    }

    @Test
    void getUserById_UserFound() {
        User user = new User();
        user.setId(1L);
        user.setEmail("test@example.com");
        user.setUsername("testuser");
        user.setStatus(UserStatus.ACTIVE);

        when(userRepository.findById(1L)).thenReturn(Optional.of(user));

        Optional<User> result = userService.getUserById(1L);

        assertTrue(result.isPresent());
        assertEquals(user, result.get());
    }

    @Test
    void getUserById_UserNotFound() {
        when(userRepository.findById(1L)).thenReturn(Optional.empty());

        Optional<User> result = userService.getUserById(1L);

        assertFalse(result.isPresent());
    }

    @Test
    void softDeleteUser_SuccessfulDelete() {
        User user = new User();
        user.setId(1L);
        user.setEmail("test@example.com");
        user.setUsername("testuser");
        user.setStatus(UserStatus.ACTIVE);

        when(userRepository.findById(1L)).thenReturn(Optional.of(user));

        userService.softDeleteUser(1L);

        verify(userRepository).save(user);
        assertNotNull(user.getDeletedAt());
    }

    @Test
    void softDeleteUser_AdminUser() {
        User adminUser = new User();
        adminUser.setId(1L);
        Role adminRole = new Role();
        adminRole.setName(RoleType.ADMIN);
        adminUser.addRole(adminRole);

        when(userRepository.findById(1L)).thenReturn(Optional.of(adminUser));

        assertThrows(ForbiddenException.class, () -> userService.softDeleteUser(1L));
    }
}
</file>

<file path="src/test/resources/application.properties">
jwt.secret=testSecretKeyForTestingPurposesOnlyDoNotUseInProduction
jwt.expiration=3600
</file>

</repository_files>
